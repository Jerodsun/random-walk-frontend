{"version":3,"sources":["views/AxiosPOST/AxiosPOST.js"],"names":["aud","require","euro","currencySeries","TimeSeries","name","columns","points","audPoints","widget","data","reverse","euroPoints","i","length","push","buildPoints","style","styler","key","color","width","CrossHairs","_this$props","this","props","x","y","pointerEvents","stroke","_","isNull","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","x1","y1","x2","y2","height","React","Component","AxiosPOST","state","tracker","timerange","range","handleTrackerChanged","_this","setState","handleTimeRangeChange","handleMouseMove","euroValue","audValue","_this2","f","format","index","bisect","trackerEvent","at","concat","get","className","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","reactstrap__WEBPACK_IMPORTED_MODULE_13__","reactstrap__WEBPACK_IMPORTED_MODULE_14__","sm","reactstrap__WEBPACK_IMPORTED_MODULE_15__","reactstrap__WEBPACK_IMPORTED_MODULE_16__","aria-label","react_timeseries_charts__WEBPACK_IMPORTED_MODULE_9__","timeRange","timeAxisStyle","ticks","opacity","stroke-dasharray","values","fill","font-size","showGrid","paddingRight","maxTime","end","minTime","begin","timeAxisAngledLabels","timeAxisHeight","onTrackerChanged","onBackgroundClick","selection","enablePanZoom","onTimeRangeChanged","onMouseMove","minDuration","id","label","min","max","hideAxisLine","type","axis","breakLine","series","interpolation","highlight","onHighlightChange","onSelectionChange","value","position","align","categories"],"mappings":"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","file":"static/js/49.6055ac8f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport _ from \"underscore\";\n\nimport { format } from \"d3-format\";\n\n// Pond\nimport { TimeSeries } from \"pondjs\";\n\nimport { ChartContainer, ChartRow, Charts, YAxis, LineChart, Baseline, Legend, Resizable, styler } from \"react-timeseries-charts\";\n\nimport {\n  ButtonGroup,\n  ButtonToolbar,\n  Card,\n  CardBody,\n  CardTitle,\n  Col,\n  Row,\n} from 'reactstrap';\n\n// Data\nconst aud = require(\"./usd_vs_aud.json\");\nconst euro = require(\"./usd_vs_euro.json\");\n\nfunction buildPoints() {\n    const audPoints = aud.widget[0].data.reverse();\n    const euroPoints = euro.widget[0].data.reverse();\n    let points = [];\n    for (let i = 0; i < audPoints.length; i++) {\n        points.push([audPoints[i][0], audPoints[i][1], euroPoints[i][1]]);\n    }\n    return points;\n}\n\nconst currencySeries = new TimeSeries({\n    name: \"Currency\",\n    columns: [\"time\", \"aud\", \"euro\"],\n    points: buildPoints()\n});\n\nconst style = styler([\n    { key: \"aud\", color: \"steelblue\", width: 2 },\n    { key: \"euro\", color: \"#F68B24\", width: 2 }\n]);\n\nclass CrossHairs extends React.Component {\n    render() {\n        const { x, y } = this.props;\n        const style = { pointerEvents: \"none\", stroke: \"#ccc\" };\n        if (!_.isNull(x) && !_.isNull(y)) {\n            return (\n                <g>\n                    <line style={style} x1={0} y1={y} x2={this.props.width} y2={y} />\n                    <line style={style} x1={x} y1={0} x2={x} y2={this.props.height} />\n                </g>\n            );\n        } else {\n            return <g />;\n        }\n    }\n}\n\n\nclass AxiosPOST extends Component {\n  state = {\n    tracker: null,\n    timerange: currencySeries.range(),\n    x: null,\n    y: null\n  };\n\n  handleTrackerChanged = tracker => {\n    if (!tracker) {\n      this.setState({ tracker, x: null, y: null });\n    } else {\n      this.setState({ tracker });\n    }\n  };\n\n  handleTimeRangeChange = timerange => {\n    this.setState({ timerange });\n  };\n\n  handleMouseMove = (x, y) => {\n    this.setState({ x, y });\n  };\n\n  render() {\n    const f = format(\"$,.2f\");\n    const range = this.state.timerange;\n\n    let euroValue, audValue;\n    if (this.state.tracker) {\n        const index = currencySeries.bisect(this.state.tracker);\n        const trackerEvent = currencySeries.at(index);\n        audValue = `${f(trackerEvent.get(\"aud\"))}`;\n        euroValue = `${f(trackerEvent.get(\"euro\"))}`;\n    } else {\n      audValue = \"null\";\n      euroValue = \"null\";\n    }\n\n\n    return (\n\n      <div className=\"animated fadeIn\">\n        <Row>\n          <Col>\n            <Card className=\"bg-light\">\n              <CardBody className=\"pb-0\">\n                <ButtonGroup className=\"float-right\"></ButtonGroup>\n                <Row>\n                  <Col sm=\"5\">\n                    <CardTitle className=\"text-value\">Traffic</CardTitle>\n                    <div className=\"small text-muted mb-2\">November 2015</div>\n                  </Col>\n                  <Col sm=\"7\" className=\"d-none d-sm-inline-block\">\n                    <ButtonToolbar className=\"float-right\" aria-label=\"Toolbar with button groups\">\n                      <ButtonGroup className=\"mr-3\" aria-label=\"First group\">\n                      </ButtonGroup>\n                    </ButtonToolbar>\n                  </Col>\n                </Row>\n\n\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <Resizable>\n                            <ChartContainer\n                                timeRange={range}\n                                timeAxisStyle={{\n                                    ticks: {\n                                        stroke: \"#AAA\",\n                                        opacity: 0.25,\n                                        \"stroke-dasharray\": \"1,1\"\n                                        // Note: this isn't in camel case because this is\n                                        // passed into d3's style\n                                    },\n                                    values: {\n                                        fill: \"#AAA\",\n                                        \"font-size\": 12\n                                    }\n                                }}\n                                showGrid={true}\n                                paddingRight={100}\n                                maxTime={currencySeries.range().end()}\n                                minTime={currencySeries.range().begin()}\n                                timeAxisAngledLabels={true}\n                                timeAxisHeight={65}\n                                onTrackerChanged={this.handleTrackerChanged}\n                                onBackgroundClick={() => this.setState({ selection: null })}\n                                enablePanZoom={true}\n                                onTimeRangeChanged={this.handleTimeRangeChange}\n                                onMouseMove={(x, y) => this.handleMouseMove(x, y)}\n                                minDuration={1000 * 60 * 60 * 24 * 30}\n                            >\n                                <ChartRow height=\"400\">\n                                    <YAxis\n                                        id=\"y\"\n                                        label=\"Price ($)\"\n                                        min={0.5}\n                                        max={1.5}\n                                        style={{\n                                            ticks: {\n                                                stroke: \"#AAA\",\n                                                opacity: 0.25,\n                                                \"stroke-dasharray\": \"1,1\"\n                                                // Note: this isn't in camel case because this is\n                                                // passed into d3's style\n                                            }\n                                        }}\n                                        showGrid\n                                        hideAxisLine\n                                        width=\"60\"\n                                        type=\"linear\"\n                                        format=\"$,.2f\"\n                                    />\n                                    <Charts>\n                                        <LineChart\n                                            axis=\"y\"\n                                            breakLine={false}\n                                            series={currencySeries}\n                                            columns={[\"aud\", \"euro\"]}\n                                            style={style}\n                                            interpolation=\"curveBasis\"\n                                            highlight={this.state.highlight}\n                                            onHighlightChange={highlight =>\n                                                this.setState({ highlight })\n                                            }\n                                            selection={this.state.selection}\n                                            onSelectionChange={selection =>\n                                                this.setState({ selection })\n                                            }\n                                        />\n                                        <CrossHairs x={this.state.x} y={this.state.y} />\n                                        <Baseline\n                                            axis=\"y\"\n                                            value={1.0}\n                                            label=\"USD Baseline\"\n                                            position=\"right\"\n                                        />\n                                    </Charts>\n                                </ChartRow>\n                            </ChartContainer>\n                        </Resizable>\n                    </div>\n\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <span>\n                            <Legend\n                                type=\"line\"\n                                align=\"right\"\n                                style={style}\n                                highlight={this.state.highlight}\n                                onHighlightChange={highlight => this.setState({ highlight })}\n                                selection={this.state.selection}\n                                onSelectionChange={selection => this.setState({ selection })}\n                                categories={[\n                                    { key: \"aud\", label: \"AUD\", value: audValue },\n                                    { key: \"euro\", label: \"Euro\", value: euroValue }\n                                ]}\n                            />\n                            <div></div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n              <div> second stuff here </div>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default AxiosPOST;\n"],"sourceRoot":""}